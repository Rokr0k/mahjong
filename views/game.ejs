<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>È∫ªÂ∞á - ÈÅäÊà≤‰∏≠</title>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        #cvs {
            margin: 0;
            padding: 0;
            position: fixed;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
        }
    </style>
</head>

<body>
    <canvas id="cvs"></canvas>
</body>
<script>
    const gameid = "<%= id %>";

    const socket = io("/game");

    const fens = {
        0: "Êù±",
        1: "Âåó",
        2: "Ë•ø",
        3: "Âçó",
    };

    const pais = {
        "f0": "üÄÄ", "f1": "üÄÅ", "f2": "üÄÇ", "f3": "üÄÉ", "y0": "üÄÑ", "y1": "üÄÖ", "y2": "üÄÜ",
        "w0": "üÄá", "w1": "üÄà", "w2": "üÄâ", "w3": "üÄä", "w4": "üÄã", "w5": "üÄå", "w6": "üÄç", "w7": "üÄé", "w8": "üÄè",
        "s0": "üÄê", "s1": "üÄë", "s2": "üÄí", "s3": "üÄì", "s4": "üÄî", "s5": "üÄï", "s6": "üÄñ", "s7": "üÄó", "s8": "üÄò",
        "t0": "üÄô", "t1": "üÄö", "t2": "üÄõ", "t3": "üÄú", "t4": "üÄù", "t5": "üÄû", "t6": "üÄü", "t7": "üÄ†", "t8": "üÄ°",
        "h0": "üÄ¢", "h1": "üÄ£", "h2": "üÄ§", "h3": "üÄ•", "h4": "üÄ¶", "h5": "üÄß", "h6": "üÄ®", "h7": "üÄ©", "ur": "üÄ´",
    };

    const player = {
        id: -1,
        shoupai: [],
        stole: [],
        pulled: null,
        huapai: [[], [], [], []],
        thrown: [],
        turn: false,
        threw: false,
    };

    let selection = -1;
    let waiting = true;
    let stealable = null;
    const stealAvailable = { 15: false, 16: false, 17: false, 18: false, 19: false };

    const cvs = document.getElementById('cvs');
    const ctx = cvs.getContext('2d');

    socket.emit("join game", gameid);

    socket.on("start game", (playerId, shoupai, huapai) => {
        player.id = playerId;
        player.shoupai = shoupai;
        player.huapai = huapai;
        draw();
    });

    socket.on("your turn", pulled => {
        player.pulled = pulled;
        player.turn = true;
        player.threw = false;
        waiting = false;
    });

    socket.on("question", (from, pai, wasShou) => {
        stealable = { from, pai, wasShou };
        stealAvailable[15] = player.shoupai.filter(hai => hai == pai).length >= 2;
        stealAvailable[16] = pai.match(/^[wst][0-8]$/) && player.shoupai.includes(pai[0] + (pai[1] - -1)) && player.shoupai.includes(pai[0] + (pai[1] - -2));
        stealAvailable[17] = pai.match(/^[wst][0-8]$/) && player.shoupai.includes(pai[0] + (pai[1] - 1)) && player.shoupai.includes(pai[0] + (pai[1] - -1));
        stealAvailable[18] = pai.match(/^[wst][0-8]$/) && player.shoupai.includes(pai[0] + (pai[1] - 2)) && player.shoupai.includes(pai[0] + (pai[1] - 1));
        stealAvailable[19] = player.shoupai.filter(hai => hai == pai).length >= 3;
    });

    socket.on("next turn", (shoupai, stole, thrown, huapai) => {
        player.shoupai = shoupai;
        player.stole = stole;
        player.thrown = thrown;
        player.huapai = huapai;
        player.turn = false;
        waiting = true;
    })

    function draw() {
        const w = cvs.width = window.innerWidth;
        const h = cvs.height = window.innerHeight;
        ctx.fillStyle = "green";
        ctx.fillRect(0, 0, w, h);

        ctx.fillStyle = player.turn ? "red" : "white";
        ctx.font = `${h / 10}px Arial`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'bottom';
        ctx.fillText(fens[player.id], w * 3 / 4, h);

        ctx.fillStyle = "white";
        ctx.font = `${h / 8}px Arial`;
        ctx.textBaseline = 'middle';
        player.shoupai.slice(0, 13).forEach((hai, i) => {
            ctx.fillText(pais[hai], w * (1 / 6 + i / 18), h * 4 / 5);
            if (selection == i) {
                ctx.fillStyle = "#FFFF0080";
                ctx.fillRect(w * (5 / 36 + i / 18), h * 59 / 80, w / 18, h / 8);
                ctx.fillStyle = "white";
            }
        });

        if (player.pulled) {
            ctx.save();
            ctx.translate(w * 2 / 3, h * 13 / 20);
            ctx.rotate(-Math.PI / 2);
            ctx.fillText(pais[player.pulled], 0, 0);
            if (selection == 13) {
                ctx.fillStyle = "#FFFF0080";
                ctx.fillRect(-w / 36, -h / 16, w / 18, h / 8);
                ctx.fillStyle = "white";
            }
            ctx.restore();
        }

        ctx.font = `${h / 12}px Arial`;
        ctx.textAlign = 'right';
        ctx.textBaseline = 'bottom';
        player.huapai[player.id].forEach((hai, i) => {
            ctx.fillText(pais[hai], w * (1 - i * 2 / 60), h);
        });

        ctx.save();
        ctx.translate(w / 2, h / 2);
        ctx.rotate(-Math.PI / 2);
        ctx.translate(-h / 2, -w / 2);
        player.huapai[(player.id + 1) % 4].forEach((hai, i) => {
            ctx.fillText(pais[hai], h - w * i * 2 / 60, w);
        });
        ctx.restore();
        ctx.save();
        ctx.translate(w / 2, h / 2);
        ctx.rotate(Math.PI);
        ctx.translate(-w / 2, -h / 2);
        player.huapai[(player.id + 2) % 4].forEach((hai, i) => {
            ctx.fillText(pais[hai], w * (1 - i * 2 / 60), h);
        });
        ctx.restore();
        ctx.save();
        ctx.translate(w / 2, h / 2);
        ctx.rotate(Math.PI / 2);
        ctx.translate(-h / 2, -w / 2);
        player.huapai[(player.id + 3) % 4].forEach((hai, i) => {
            ctx.fillText(pais[hai], h - w * i * 2 / 60, w);
        });
        ctx.restore();

        ctx.fillStyle = selection == 14 ? "blue" : "red";
        ctx.beginPath();
        ctx.arc(w / 2, h, h / 8, 0, Math.PI, true);
        ctx.fill();
        ctx.fillStyle = "white";
        ctx.font = `${h / 10}px Arial`;
        ctx.textAlign = "center";
        ctx.textBaseline = "bottom";
        ctx.fillText("Âíå", w / 2, h);

        if (stealable) {
            ctx.fillStyle = "black";
            ctx.fillRect(w / 10, h / 12, w * 4 / 5, h * 37 / 60);
            ctx.fillStyle = "white";
            ctx.font = `${h / 12}px Arial`;
            ctx.fillText(stealable.wasShou ? "Êâã‰∏≠ÁöÑÁâå" : "ÂâõÊäΩÁöÑÁâå", w / 2, h / 5);
            ctx.font = `${h / 5}px Arial`;
            ctx.textBaseline = "middle";
            ctx.fillText(pais[stealable.pai], w / 2, h / 3);
            ctx.font = `${h / 6}px Arial`;
            ctx.fillStyle = stealAvailable[15] ? selection == 15 ? "lightgreen" : "white" : "gray";
            ctx.fillText("Á¢∞", w * 7 / 30, h * 3 / 5);
            ctx.fillStyle = stealAvailable[19] ? selection == 19 ? "lightgreen" : "white" : "gray";
            ctx.fillText("Êßì", w * 23 / 30, h * 3 / 5);
            ctx.font = `${h / 12}px Arial`;
            ctx.fillStyle = stealAvailable[16] ? selection == 16 ? "lightgreen" : "white" : "gray";
            ctx.fillText("ÂêÉ", w * 13 / 30, h * 67 / 120);
            ctx.fillStyle = stealAvailable[17] ? selection == 17 ? "lightgreen" : "white" : "gray";
            ctx.fillText("ÂêÉ", w / 2, h * 67 / 120);
            ctx.fillStyle = stealAvailable[18] ? selection == 18 ? "lightgreen" : "white" : "gray";
            ctx.fillText("ÂêÉ", w * 17 / 30, h * 67 / 120);
            ctx.fillText(`${pais[stealable.pai]}`, w * 13 / 30 - h / 30, h * 77 / 120);
            ctx.fillText(`${pais[stealable.pai[0] + (stealable.pai[1] - -1)] || pais.ur}`, w * 13 / 30, h * 77 / 120);
            ctx.fillText(`${pais[stealable.pai[0] + (stealable.pai[1] - -2)] || pais.ur}`, w * 13 / 30 + h / 30, h * 77 / 120);
            ctx.fillText(`${pais[stealable.pai[0] + (stealable.pai[1] - 1)] || pais.ur}`, w / 2 - h / 30, h * 77 / 120);
            ctx.fillText(`${pais[stealable.pai]}`, w / 2, h * 77 / 120);
            ctx.fillText(`${pais[stealable.pai[0] + (stealable.pai[1] - -1)] || pais.ur}`, w / 2 + h / 30, h * 77 / 120);
            ctx.fillText(`${pais[stealable.pai[0] + (stealable.pai[1] - 2)] || pais.ur}`, w * 17 / 30 - h / 30, h * 77 / 120);
            ctx.fillText(`${pais[stealable.pai[0] + (stealable.pai[1] - 1)] || pais.ur}`, w * 17 / 30, h * 77 / 120);
            ctx.fillText(`${pais[stealable.pai]}`, w * 17 / 30 + h / 30, h * 77 / 120);
        } else if (waiting) {
            ctx.font = `${h / 7}px Arial`;
            ctx.textBaseline = "middle";
            ctx.fillText("Á≠âÂæÖ...", w / 2, h * 3 / 5);
        }

        requestAnimationFrame(draw);
    }

    window.onmousemove = e => {
        const x = e.offsetX;
        const y = e.offsetY;
        const w = cvs.width;
        const h = cvs.height;
        selection = -1;
        if ((player.turn && !player.threw || stealable) && (x - w / 2) ** 2 + (y - h) ** 2 < (h / 8) ** 2) {
            selection = 14;
        }
        if (player.turn && !player.threw) {
            if (y > h * 59 / 80 && y < h * 69 / 80) {
                if (x > w * 5 / 36 && x < w * 31 / 36) {
                    const s = Math.floor((x / w - 5 / 36) * 18);
                    if (s < player.shoupai.length) {
                        selection = s;
                    }
                }
            } else if (y > h * 13 / 20 - w / 36 && y < h * 13 / 20 + w / 36 && x > w * 2 / 3 - h / 16 && x < w * 2 / 3 + h / 16) {
                selection = 13;
            }
        }
        if (stealable) {
            if (x > w / 10 && x < w * 9 / 10 && y > h / 2 && y < h * 7 / 10) {
                const s = Math.floor((x / w - 1 / 10) * 15 / 4) + 15;
                if (s == 15 && stealAvailable[15]) {
                    selection = 15;
                } else if (s == 17 && stealAvailable[19]) {
                    selection = 19;
                } else {
                    const ss = Math.floor((x / w - 23 / 60) * 90 / 7) + 16;
                    if (ss >= 16 && ss <= 18 && stealAvailable[ss]) {
                        selection = ss;
                    }
                }
            }
        }
    };

    window.onclick = e => {
        if (selection == 14) {
            socket.emit("he", gameid, player.id);
            return;
        }
        if (player.turn) {
            if (!player.threw && selection >= 0 && selection < 14) {
                if (selection < 13) {
                    player.shoupai.splice(selection, 1, player.pulled);
                    player.pulled = null;
                } else {
                    player.pulled = null;
                }
                socket.emit("throw", gameid, player.id, selection);
                player.threw = true;
                waiting = true;
                selection = -1;
            }
        } else if (stealable) {
            socket.emit("answer", gameid, player.id, selection < 0 ? 20 : selection);
            stealable = null;
            waiting = true;
            selection = -1;
        }
    }

    socket.on("disconnect", () => {
        alert("Êúâ‰∫∫Èõ¢Èñã‰∫ÜÈÅäÊà≤!");
        location.href = "/list";
    });
</script>

</html>